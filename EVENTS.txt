· INTRODUCTION TO BROWSER EVENTS - An event is a signal that something has happened, all DOM elements must generate one 

    · EVENTS EXAMPLE - There are a lot of different kinds of events, following, the most useful ones:
        · MOUSE EVENTS:
            - "click" -> When the mouse clicks an element
            - "contextmenu" -> When the mouse r-clicks something 
            - "mouseover / mouseout" -> When the mouse cursor comes over/leaves an element
            - "mousedown / mouseup" -> When the mouse button is pressed/relased over an element
            - "mousemove" -> When the mouse is moved 
        · KEYBOARD EVENTS: 
            - "keydown" and "keyup" -> When a kb key is pressed and relased 
        · FORM ELEMENT EVENTS:
            - "submit" -> When the visitor submits a <form>
            - "focus" -> When the visitor focuses on an element (e.g an <input>) 
        · DOCUMENT EVENTS:
            - "DOMContentLoaded" -> When the HTML is loaded and processed, DOM is fully built 
        · CSS EVENTS:
            - "transitioned" -> When a CSS-animation finishes 
    · EVENT HANDLERS - To react to an event we need something to handle it, a function that runs in case an event occurs. There are several 
      ways to assign an handler:
        · HTML ATTRIBUTE - An handler can be set in HTML with an attribute "on<event>":
                <input value="clickMe" onclick="alert('Click!)" type="button">
            Better yet, we can assign a function to an event:
                    <input type="button" onclick="function()" value="Some Value"> //-> when button is clicked, function() does something
        · DOM PROPERTY - We can assign an handler using a DOM property:
                <script>
                    elem.onclick = function(){
                        alert("Clicked");
                    };
                </script>
        · The value of "this" inside an handler is the element itself, the one which has the handler on it 
    · IT IS NOT POSSIBLE TO USE "setAttribute" for handlers since attributes are always strings 
    · ADD EVENT LISTENER -  In order to assign multiple handlers for an event, we need to use special properties "addEventListener" and "removeEventListener":
        - "elem.addEventListener(event, handler [, options])" -> Where:
            - "event" -> Event name (click)
            - "handler" -> The handler function 
            - "options" -> An additional object with properties:
                - "once" -> If true, then the listener is removed after it triggers once 
                - "capture" -> The phase where to handle the event 
                - "passive" -> If true, then the handler won't call "preventDefault()"
        - "elem.removeEventListener(event, handler [, options])" -> Used to remove the handler. In order to remove an handler, we should pass 
          exactly the same function that was assigned, hence, if you want to remove an handler, the function has to be stored in a variable 
          and cannot be inline 
                elem.addEventListener("click", () => alert("Click"));
                elem.removeEventListener("click"; () => alert("Click")); // doesn't work, cannot be removed 
                elem.addEventListener("click", handler); // hander is a previuosly defined function
                elem.removeEventListener("click", handler); //removed 
        · Multiple cals to addEventListener() allow it to add multiple handlers 
    · EVENT OBJECT - When an event occurs, the browser creates an event object with several details in it and passes as an argument to the handler.
      Some of properties of "event" object are:
        - "type" -> Event type (click)
        - "currentTarget" -> Element that handled the event. That's the same as "this" unless the handler is arrow function or its "this" is bound to something else 
        - "clientX/Y" -> Window relative coordinates of the cursor
    · OBJECT HANDLERS - We can assign an object as an handler usind "addEventListener()", when an event occurs, its "handleEvent" method is called:
            let obj = {
                handleEvent(event){
                    alert(event.type + "at" + event.currentTarget);
                }
            };
            elem.addEventListener('click', obj);  // when the event occurs, handleEvent is called automatically 

    · BUBBLING AND CAPTURING 
        · BUBBLING - When an event happens on an element, it first runs the handlers on it, then on its parent, then all the way up 
          to the farthest ancestor. Basically, an event is handled on the leaf, then events bubble from the inner element up though
          parents, like a bubble in the water.
            · Not all events bubble ("focus" doesn't)
            · EVENT TARGET - The element that caused the bubbling is called "target element" and is accessible as "event.target", which for 
              the first element is equal to "this", after that, "this" becomes the current event
            · STOPPING BUBBLING - In order to stop bubbling, we use "event.stopPropagation()" to stop 1 handler, however, if an event has multiple 
              handler and we want to stop them altogether, we use "event.stopImmediatePropagation()", after it, no other handlers execute.
        · CAPTURING - The standard DOM events describes 3 phases of event propagation:
            1. Capturing phase -> The event goes down to the element(starts from ancestor and goes down to target)
            2. Target phase -> The event reached the target element 
            3. Bubbling phase -> The event bubbles up from the element 
                · To catch an event on the capturing phase, we need to set the handler's "capture" to true:
                        elem.addEventListener(..., {capture: true});
                    · If we want to remove this handler, we need to specify the capture as well, removeEventListener(..., {capture: true})
                    · If we call "event.stopPropagation()" or "event.stopImmediatePropagation()" while in capturing phase, not only we stop the 
                      capturing, but we also prevent the bubbling. 

    · EVENT DELEGATION - If we have a lot of elements handled in a similair way, instead of assigning an handler to each one of them, we put 
      a single hander on their common ancestor. For example, an handler to highlight what we clicked in a table:
            table.onclick = function(event){  // we pass the event object 
                let target = event.target; //where was the click?
                if(target.tagName != 'TD')return;
                highlight(target);
            }
        · We can also use an object with several attributes instead of a function:
                <div>
                    <button data-action="save">Save</button>
                    <button data-action="load">Load</button>
                </div>
                <script>
                    class Doer{
                        constructor(elem){
                            this._elem = elem;
                            elem.onclick = this.onClick.bind(this);
                        }
                        save(){
                            doSomething();
                        }
                        load(){
                            doSomething();
                        }
                        onClick(event){
                            let action = event.target.dataset.action;
                            if(action){
                                this[action]();
                            }
                        }
                    }
        · We can also do stuff such as a general function for a certain behaviour:
                <input type="button" value="1" data-counter>
                <input type="button" value="2" data-counter>
                <script>
                    document.addEventListener('click', function(event){
                        if(event.target.dataset.counter != undefined){ // if counter attribute exists 
                            event.target.value++;
                        }
                    });
                </script>

    · BROWSER DEFAULT ACTIONS - A browser has several default actions(text selecting, link opening, ...) which can be blocked explicitly
        · PREVENTING BROWSER ACTIONS - There are 2 ways to tell the browser we don't want to act:
            1. Using the "event" object since there is a method "event.preventDefault()"
            2. If the handler is assigned using "on<event>", then returning false does the same 
                    <a href="/" onclick="return false">Link1</a>
                    <a href="/" onclick="event.preventDefault()">Link2</a> //both do nothing 
            · If we want to tell the browser that we're not going to prevent any default behaviour and thus eliminate unecessary controls
              that may cause lag or jitter, we use the "passive: true" option of "addEventListener()", this way it signals right away that 
              we're not going to use "preventDefault()" 
            · In order to check if an element default behaviour was prevented, we have the attribute "event.defaultPrevented" which 
              returns true if the event default behaviour was prevented. This can be used to prevent unecessary bubbling while at the same 
              time having the possibility to use it for other handlers 